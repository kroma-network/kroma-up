# Network to run the node on ("sepolia")
NETWORK_NAME=sepolia

IMAGE_TAG__KROMA_GETH=v0.5.3
IMAGE_TAG__KROMA_NODE=v1.4.3
IMAGE_TAG__KROMA_VALIDATOR=v1.4.3
IMAGE_TAG__KROMA_PROVER_PROXY=v0.1.3
IMAGE_TAG__KROMA_PROVER=v0.1.5

# L1 RPC endpoint.
# You can check and use one of the list of RPC endpoints: https://chainlist.org/chain/11155111
# Or you can also use Alchemy or Infura, etc.
# After Ecotone activation, you need also L1 Beacon endpoint to get blob data.
# You must use a websocket RPC endpoint to run a validator node for below reasons:
# As an asserter, to respond if a challenge is created to the output you submitted.
# As a challenger, to observe output submission events and create challenge to an invalid output.
KROMA_NODE__L1_BEACON_ENDPOINT=
KROMA_NODE__L1_RPC_ENDPOINT=
KROMA_VALIDATOR__L1_RPC_ENDPOINT=

KROMA_GETH__BOOT_NODES=enode://eb7d517a51f12d565c53fc3c2bd7d830951626403fd41ddcaa356a5a63aaf700a99856dea5f805ab52e956dbb09017c868af5c2503f0753d598449d0987d0867@p2p-0.sepolia.kroma.network:30304?discport=30303,enode://11a22dd7e0242395c0383679c046b6c37ed7bb085b5ef9229314219b6d56d676208a22ff33487e23bde4a4e2693c243ec38e18f385a5e9fcc89c01b907c65731@p2p-1.sepolia.kroma.network:30304?discport=30303
KROMA_NODE__BOOT_NODES=enr:-J24QNScwSQ9xyCI9TuC4z55f1mUTH7UwwU6XrdRkXTry5okQDMDQVzeGXKGlCMGCjW09zZdGCLBppgx7I-IlyAHTL2GAYora1atgmlkgnY0gmlwhCvKZq2Hb3BzdGFja4O2EgCJc2VjcDI1NmsxoQI5RRcWthXDZBQIWy2V5f0F6vU5ULQ7Onz0J-jOwom-O4N0Y3CCIyuDdWRwgiMr,enr:-J24QOJ08WAtwmF8ZQf9xMYc1XNAheQYbWQmyDdsMJywUD1SLG6gfhGqgJp-wUgZTtIazd8WwUf9ziehfxF-grArB32GAYorbLu4gmlkgnY0gmlwhDRPliiHb3BzdGFja4O2EgCJc2VjcDI1NmsxoQJxu9bJv02qtIehfeOmtA8B_RWqZylpHOGOOBuWQo-xXoN0Y3CCIyuDdWRwgiMr

#===========================================================================#
#     ↓ The following settings are used to act as a Kroma-validator ↓       #
#===========================================================================#

# To run a validator, Account's PRIVATE_KEY or MNEMONIC and HD_PATH is/are required.

# If you are using MNEMONIC and HD_PATH, enter them here
KROMA_VALIDATOR__MNEMONIC=
KROMA_VALIDATOR__HD_PATH=

# If you are using PRIVATE_KEY, enter them here
KROMA_VALIDATOR__PRIVATE_KEY=

# Kroma-validator as an output submitter. If you want to submit an L2 output in public round, set KROMA_VALIDATOR__ALLOW_PUBLIC_ROUND true.
KROMA_VALIDATOR__OUTPUT_SUBMITTER_ENABLED=true
KROMA_VALIDATOR__ALLOW_PUBLIC_ROUND=false

# Kroma-validator as a challenger.
# Challenger is disabled by default. If you want to run a challenger, you need to run a Kroma-prover as well.
KROMA_VALIDATOR__CHALLENGER_ENABLED=false

# Kroma-validator as a guardian.
# Guardian is disabled by default. Guardian is only for Security Council.
KROMA_VALIDATOR__GUARDIAN_ENABLED=false

# Kroma-prover is required if the challenger is enabled.
# The RPC endpoint of Kroma-prover for ZK proof generation.
KROMA_VALIDATOR__PROVER_RPC=http://kroma-prover-proxy:6000


#===================================================================#
#    ↓ The following settings are used for Kroma-Prover-Proxy ↓     #
#===================================================================#
# We recommend to use the values provided by default
KROMA_PROVER_PROXY__PROVER_BASE_DIR=/.prover/proofs
KROMA_PROVER_PROXY__PROVER_URL_SCHEMA=http
KROMA_PROVER_PROXY__PROVER_RPC_PORT=3030

# If you are using aws access key, you must enter it.
KROMA_PROVER_PROXY__AWS_REGION=
KROMA_PROVER_PROXY__AWS_ACCESS_KEY_ID=
KROMA_PROVER_PROXY__AWS_SECRET_ACCESS_KEY=

# Currently, Kroma-prover-proxy only supports AWS, so you'll need to enter the AWS EC2 instance ID where the Kroma-prover is running.
KROMA_PROVER_PROXY__PROVER_INSTANCE_ID=

# You need to specify in which network environment the Kroma-prover-proxy will call Kroma-prover.
# If Kroma-prover-proxy and Kroma-prover are on the same network, set it to `private` so that the communication is internal.
# However, if they are on different networks, set it to `public` so that Kroma-prover can utilize the Public IP of the instance it is running on.
KROMA_PROVER_PROXY__PROVER_ADDRESS_TYPE=
